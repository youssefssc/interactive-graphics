{"version":3,"sources":["diagrams/Home/index.jsx","diagrams/AnimatedCircles/index.jsx","hooks/useInterval.js","diagrams/ZoomableStack/mockData.js","diagrams/ZoomableStack/index.jsx","App.js","reportWebVitals.js","index.js"],"names":["Home","to","generateCircles","n","Array","fill","map","Math","floor","random","allCircles","AnimatedCircle","index","isShowing","wasShowing","useRef","useEffect","current","style","useSpring","config","duration","r","opacity","circle","cx","cy","AnimatedCircles","useState","visibleCircles","setVisibleCircles","callback","delay","savedCallback","id","setInterval","clearInterval","useInterval","viewBox","d","includes","key","mockData","AnimatedBar","title","value","height","props","backgroundColor","width","div","className","ZoomableStack","visibleStack","setVisibleStack","zoomLevel","setZoomLevel","minData","min","Object","values","maxData","max","reMapHeight","keys","reduce","accumulator","currentValue","orient","type","step","onChange","event","level","target","zoomValue","zoomObj","fromEntries","entries","filter","Nav","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2932eabe.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\nconst Home = () => {\n  return (\n    <section>\n      <h2> Interactive Graphics </h2>\n\n      <ul>\n        <li>\n          <Link to='/animatedCircles'> Animated Circles</Link>\n        </li>\n        <li>\n          <Link to='/zoomableStack'>Zoomable Stack</Link>\n        </li>\n      </ul>\n    </section>\n  );\n};\n\nexport default Home;\n","import React, { useState, useEffect, useRef } from 'react';\n\nimport { useInterval } from './../../hooks/useInterval';\nimport { useSpring, animated } from 'react-spring';\n\nconst generateCircles = n =>\n  Array(n)\n    .fill(0)\n    .map(() => Math.floor(Math.random() * 10));\n\nconst allCircles = generateCircles(10);\n\nconst AnimatedCircles = () => {\n  const [visibleCircles, setVisibleCircles] = useState(allCircles);\n\n  useInterval(() => {\n    setVisibleCircles(generateCircles(6));\n    // console.log(visibleCircles);\n  }, 2000);\n\n  return (\n    <svg viewBox='0 0 100 20'>\n      {allCircles.map(d => (\n        <AnimatedCircle\n          key={d.key}\n          index={d}\n          isShowing={visibleCircles.includes(d)}\n        />\n      ))}\n    </svg>\n  );\n};\n\nconst AnimatedCircle = ({ index, isShowing }) => {\n  const wasShowing = useRef(false);\n\n  useEffect(() => {\n    wasShowing.current = isShowing;\n  }, [isShowing]);\n\n  const style = useSpring({\n    config: {\n      duration: 800,\n    },\n    r: isShowing ? 2 : 0,\n    opacity: isShowing ? 1 : 0,\n  });\n\n  return (\n    <animated.circle\n      {...style}\n      cx={index * 5 + 20}\n      cy='10'\n      fill={\n        !isShowing ? 'pink' : !wasShowing.current ? 'aquamarine' : 'lightgrey'\n      }\n    />\n  );\n};\n\nexport default AnimatedCircles;\n","import { useEffect, useRef } from 'react';\n\nexport const useInterval = (callback, delay) => {\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n};\n","export const mockData = {\n  'WHOIS Records': 1000,\n  'CDN Assets': 800,\n  'SSL Certs': 700,\n  'DNS Lookups': 500,\n  'Small Cat 1': 300,\n  'Small Cat 2': 200,\n  'Small Cat 3': 100,\n  'Smallest Cat': 50,\n};\n","import React, { useState, useEffect, useRef } from 'react';\n\n// import {useInterval} from './../../hooks/useInterval';\nimport { useSpring, animated } from 'react-spring';\n\nimport { mockData } from './mockData';\n\nimport './stack.css';\n\nconst STACK_HEIGHT = 500;\n\nconst ZoomableStack = () => {\n  const [visibleStack, setVisibleStack] = useState(mockData);\n  const [zoomLevel, setZoomLevel] = useState(100);\n\n  const minData = Math.min(...Object.values(mockData));\n  const maxData = Math.max(...Object.values(mockData));\n\n  const zoomToLevel = event => {\n    const level = event.target.value;\n    setZoomLevel(level);\n    const zoomValue = (level / 100) * maxData + minData;\n    const zoomObj = Object.fromEntries(\n      Object.entries(mockData).filter(([key, value]) => value < zoomValue)\n    );\n    // console.log(zoomObj);\n    setVisibleStack(zoomObj);\n    return zoomObj;\n  };\n\n  const reMapHeight = (key, value) => {\n    let height = 0;\n    if (Object.keys(visibleStack).includes(key)) {\n      height = 100;\n    }\n\n    const visibleValues = Object.values(visibleStack);\n    const findSum = (accumulator, currentValue) => accumulator + currentValue;\n\n    const sumVisibleValues = visibleValues.reduce(findSum);\n    // console.log(sumVisibleValues);\n    height = (value / sumVisibleValues) * STACK_HEIGHT;\n\n    return height;\n  };\n\n  //  useInterval(() => {\n  // setVisibleStack(zoomToLevel(Math.random() * 100));\n  //  }, 1000)\n\n  return (\n    <div className='container'>\n      <div className='zoom'>\n        <input\n          className='input-range'\n          orient='vertical'\n          type='range'\n          step='1'\n          min='1'\n          max='100'\n          value={zoomLevel}\n          onChange={zoomToLevel}\n        />\n        <p>\n          zoom level\n          <br />\n          {100 - zoomLevel}\n        </p>\n      </div>\n      <div className='stack'>\n        {Object.entries(mockData).map(([key, value], index) => (\n          <AnimatedBar\n            key={key}\n            index={index}\n            value={value}\n            title={key}\n            height={reMapHeight(key, value)}\n            isShowing={Object.keys(visibleStack).includes(key)}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nconst AnimatedBar = ({ title, value, index, height, isShowing }) => {\n  const wasShowing = useRef(false);\n\n  useEffect(() => {\n    wasShowing.current = isShowing;\n  }, [isShowing]);\n\n  const props = useSpring({\n    config: {\n      duration: 300,\n    },\n    //  display: isShowing ? 'block' : 'none',\n    opacity: isShowing ? 1 : 0,\n    height: isShowing ? height : 0,\n    backgroundColor:\n      height < 30 ? '#333' : index % 2 === 0 ? '#abcccf' : '#f1faeb',\n    width: 400,\n  });\n\n  /* \n    // <animated.div {...style}\n    //   fill={\n    //     !isShowing          ? \"#222333\" :\n    //     !wasShowing.current ? \"#ff0000\" :\n    //                           \"#0000ff\"\n    // }\n    > */\n\n  return (\n    <animated.div className='box' style={props}>\n      {height > 30 && (\n        <span>\n          {' '}\n          <b>{title}</b> {value}\n        </span>\n      )}\n    </animated.div>\n  );\n};\n\nexport default ZoomableStack;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route, Link } from 'react-router-dom';\n\nimport Home from './diagrams/Home';\nimport AnimatedCircles from './diagrams/AnimatedCircles';\n// import Circles from './diagrams/Circles';\nimport ZoomableStack from './diagrams/ZoomableStack';\n\nimport './App.scss';\n\nconst App = () => {\n  return (\n    <Router>\n      <div className='App'>\n        <Switch>\n          <Route exact path='/'>\n            <Home />\n          </Route>\n          <Route path='/animatedCircles'>\n            <>\n              <Nav />\n              <AnimatedCircles />\n            </>\n          </Route>\n          <Route path='/zoomableStack'>\n            <>\n              <Nav />\n              <ZoomableStack />\n            </>\n          </Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n};\n\nconst Nav = () => {\n  return (\n    <nav>\n      <Link to='/'> &larr; Back</Link>\n    </nav>\n  );\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}